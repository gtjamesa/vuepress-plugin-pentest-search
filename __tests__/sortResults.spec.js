import sortResults from "../sort-results";

describe('sortResults', () => {
    const pageBoxTemplate = {
        "title": "[NAME]",
        "relativePath": "boxes/box-template.md",
        "path": "/boxes/box-template.html#enumeration",
    }

    const resJwt = [
        {
            "title": "TheNotebook",
            "frontmatter": {
                "tags": [
                    "docker",
                    "jwt",
                    "jwt kid"
                ],
                "active": true
            },
            "regularPath": "/boxes/htb/thenotebook.html",
            "relativePath": "boxes/htb/thenotebook.md",
            "path": "/boxes/htb/thenotebook.html"
        },
        {
            "title": "Unicode",
            "frontmatter": {
                "active": true,
                "tags": [
                    "jwt",
                    "jwt jku"
                ]
            },
            "regularPath": "/boxes/htb/unicode.html",
            "relativePath": "boxes/htb/unicode.md",
            "path": "/boxes/htb/unicode.html"
        },
        {
            "title": "JWT",
            "frontmatter": {},
            "regularPath": "/pentesting-cheat-sheet/jwt.html",
            "relativePath": "pentesting-cheat-sheet/jwt.md",
            "path": "/pentesting-cheat-sheet/jwt.html"
        }
    ];

    test('should not include box template in results', () => {
        const sorted = sortResults([pageBoxTemplate]);
        expect(sorted).toHaveLength(0);
    })

    test('should sort boxes last', () => {
        const sorted = sortResults(resJwt);

        expect(sorted).toHaveLength(3);
        expect(sorted[0].title).toBe('JWT');
        expect(sorted[1].title).toBe('TheNotebook');
        expect(sorted[2].title).toBe('Unicode');
    })

    test('should apply max search results', () => {
        const sorted = sortResults(resJwt, 2);

        expect(sorted).toHaveLength(2);
    })
});
