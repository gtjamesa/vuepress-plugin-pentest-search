import { sortResults, extractCategory, extractCategoryName } from "../sort-results";

describe('sortResults', () => {
    const pageBoxTemplate = {
        "title": "[NAME]",
        "relativePath": "boxes/box-template.md",
        "path": "/boxes/box-template.html#enumeration",
    }

    const resJwt = [
        {
            "title": "TheNotebook",
            "frontmatter": {
                "tags": [
                    "docker",
                    "jwt",
                    "jwt kid"
                ],
                "active": true
            },
            "regularPath": "/boxes/htb/thenotebook.html",
            "relativePath": "boxes/htb/thenotebook.md",
            "path": "/boxes/htb/thenotebook.html"
        },
        {
            "title": "Unicode",
            "frontmatter": {
                "active": true,
                "tags": [
                    "jwt",
                    "jwt jku"
                ]
            },
            "regularPath": "/boxes/htb/unicode.html",
            "relativePath": "boxes/htb/unicode.md",
            "path": "/boxes/htb/unicode.html"
        },
        {
            "title": "JWT",
            "frontmatter": {},
            "regularPath": "/pentesting-cheat-sheet/jwt.html",
            "relativePath": "pentesting-cheat-sheet/jwt.md",
            "path": "/pentesting-cheat-sheet/jwt.html"
        }
    ];

    test('should not include box template in results', () => {
        const sorted = sortResults([pageBoxTemplate]);
        expect(sorted).toHaveLength(0);
    })

    test('should sort boxes last', () => {
        const sorted = sortResults(resJwt);

        expect(sorted).toHaveLength(3);
        expect(sorted[0].title).toBe('JWT');
        expect(sorted[1].title).toBe('TheNotebook');
        expect(sorted[2].title).toBe('Unicode');
    })

    test('should apply max search results', () => {
        const sorted = sortResults(resJwt, 2);

        expect(sorted).toHaveLength(2);
    })
});

describe('extractCategory', () => {
    test('should extract category from path', () => {
        // Simple use cases
        expect(extractCategory('/boxes/htb-dante.html')).toBe('boxes');
        expect(extractCategory('/boxes/htb/unicode.html')).toBe('htb');
        expect(extractCategory('/boxes/pg/algernon.html')).toBe('pg');
        expect(extractCategory('/active-directory/enumeration.html')).toBe('active-directory');
        expect(extractCategory('/methodology/enumeration.html')).toBe('methodology');

        // Platform specific boxes
        expect(extractCategory('/boxes/fortress-akerva.html')).toBe('boxes'); // fortress-akerva
        expect(extractCategory('/boxes/fortress-akerva/10.13.13.11.html')).toBe('fortress-akerva');
        expect(extractCategory('/boxes/oscp/10.1.1.27.html')).toBe('oscp');
        expect(extractCategory('/boxes/htb-dante/172.16.1.1.html')).toBe('htb-dante');
    })
});

describe('extractCategoryName', () => {
    test('should extract category name from path', () => {
        // Simple use cases
        expect(extractCategoryName('/boxes/htb-dante.html')).toBe('boxes');
        expect(extractCategoryName('/boxes/htb/unicode.html')).toBe('htb');
        expect(extractCategoryName('/boxes/pg/algernon.html')).toBe('pg');
        expect(extractCategoryName('/boxes/oscp/10.1.1.27.html')).toBe('oscp');
        expect(extractCategoryName('/active-directory/enumeration.html')).toBe('active directory');
        expect(extractCategoryName('/methodology/enumeration.html')).toBe('methodology');

        // Platform specific boxes
        expect(extractCategoryName('/boxes/fortress-akerva.html')).toBe('boxes');
        expect(extractCategoryName('/boxes/fortress-akerva/10.13.13.11.html')).toBe('fortress/akerva');
        expect(extractCategoryName('/boxes/htb-dante/172.16.1.1.html')).toBe('htb/dante');
        expect(extractCategoryName('/boxes/htb-dante-test/172.16.1.1.html')).toBe('htb/dante test');
    });
});
